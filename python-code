# import necessary libraries
import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# download the SpamAssassin Public Corpus dataset and load iy into a Pandas DataFrame
data = pd.read_csv('/Users/sanuratnarajah/Documents/spamemailclassifier.csv', encoding='latin-1')

# clean and preprocess the text data
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(data['text'])
y = data['class']

# split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# train a machine learning model on the training data
clf = MultinomialNB()
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print("Accuracy:", accuracy)
print("Confusion Matrix:\n", confusion)
print("Classification Report:\n", classification_rep)

# use the trained model to classify new emails as spam or not spam 
new_email = ["This is a test email. Congratulations, you've won $1,000,000!"]
new_email_transformed = vectorizer.transform(new_email)
prediction = clf.predict(new_email_transformed)

if prediction[0] == 'spam':
    print("This is a spam email.")
else:
    print("This is not a spam email.")
